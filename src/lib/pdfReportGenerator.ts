
import jsPDF from 'jspdf';
import { toast } from "@/hooks/use-toast";

// Mock function to simulate PDF generation - in a real app, this would use jsPDF to create a real PDF
export const downloadPDFReport = async (
  data: any, 
  reportType: 'education' | 'health' | 'finance', 
  userName: string = 'User',
  options: { includeTimestamp?: boolean; includeHeader?: boolean } = {}
) => {
  try {
    // Create a new PDF document
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    
    // Default options
    const { 
      includeTimestamp = true, 
      includeHeader = true 
    } = options;
    
    // Add title and header
    if (includeHeader) {
      doc.setFontSize(22);
      doc.setTextColor(0, 122, 204); // Blue color for headers
      doc.text('NexaCore', pageWidth / 2, 20, { align: 'center' });
      
      doc.setFontSize(18);
      doc.setTextColor(68, 68, 68); // Dark gray
      
      const reportTitle = {
        'education': 'Education Report',
        'health': 'Health & Wellness Report',
        'finance': 'Financial Report'
      }[reportType];
      
      doc.text(reportTitle || 'Report', pageWidth / 2, 30, { align: 'center' });
    }
    
    // Add user info and date
    doc.setFontSize(12);
    doc.setTextColor(102, 102, 102); // Medium gray
    doc.text(`User: ${userName}`, 20, 40);
    
    if (includeTimestamp) {
      const now = new Date();
      doc.text(`Generated: ${now.toLocaleDateString()} ${now.toLocaleTimeString()}`, 20, 50);
    }
    
    // Add separator line
    doc.setDrawColor(220, 220, 220); // Light gray
    doc.line(20, 55, pageWidth - 20, 55);
    
    let yPos = 65; // Starting y position for content
    
    // Add content based on report type
    if (reportType === 'education') {
      yPos = addEducationContent(doc, data, yPos);
    } else if (reportType === 'health') {
      yPos = addHealthContent(doc, data, yPos);
    } else if (reportType === 'finance') {
      yPos = addFinanceContent(doc, data, yPos);
    }
    
    // Add footer
    const footerText = "This report was generated by NexaCore AI";
    doc.setFontSize(10);
    doc.setTextColor(150, 150, 150); // Light gray
    doc.text(footerText, pageWidth / 2, doc.internal.pageSize.getHeight() - 10, { align: 'center' });
    
    // Save the PDF
    doc.save(`nexacore-${reportType}-report.pdf`);
    
    console.log(`Generated ${reportType} report for ${userName}`);
    return true;
  } catch (error) {
    console.error('PDF generation error:', error);
    toast({
      title: "PDF Generation Failed",
      description: "There was an error creating your PDF report.",
      variant: "destructive",
    });
    return false;
  }
};

const addEducationContent = (doc: jsPDF, data: any, startY: number): number => {
  let yPos = startY;
  
  // Section: Current Education
  doc.setFontSize(16);
  doc.setTextColor(0, 122, 204); // Blue
  doc.text('Current Education', 20, yPos);
  yPos += 10;
  
  doc.setFontSize(12);
  doc.setTextColor(68, 68, 68); // Dark gray
  
  // Loop through education data
  if (data.education && data.education.length > 0) {
    data.education.forEach((edu: any) => {
      doc.text(`• ${edu.degree || 'Program'}: ${edu.institution || 'Institution'}`, 25, yPos);
      yPos += 7;
      
      if (edu.major) {
        doc.text(`  Major: ${edu.major}`, 30, yPos);
        yPos += 7;
      }
      
      if (edu.gradYear) {
        doc.text(`  Expected graduation: ${edu.gradYear}`, 30, yPos);
        yPos += 10;
      }
    });
  } else {
    doc.text('No education data available', 25, yPos);
    yPos += 10;
  }
  
  // Section: Skills
  doc.setFontSize(16);
  doc.setTextColor(0, 122, 204); // Blue
  doc.text('Skills', 20, yPos);
  yPos += 10;
  
  if (data.skills && data.skills.length > 0) {
    const skillsPerRow = 3;
    const skillRows = Math.ceil(data.skills.length / skillsPerRow);
    
    for (let i = 0; i < skillRows; i++) {
      let skillText = '';
      
      for (let j = 0; j < skillsPerRow; j++) {
        const skillIndex = i * skillsPerRow + j;
        if (skillIndex < data.skills.length) {
          skillText += `• ${data.skills[skillIndex].name || data.skills[skillIndex]}   `;
        }
      }
      
      doc.text(skillText, 25, yPos);
      yPos += 7;
    }
    
    yPos += 3;
  } else {
    doc.text('No skills data available', 25, yPos);
    yPos += 10;
  }
  
  // Section: Recommendations
  doc.setFontSize(16);
  doc.setTextColor(0, 122, 204); // Blue
  doc.text('Recommendations', 20, yPos);
  yPos += 10;
  
  if (data.recommendations && data.recommendations.length > 0) {
    data.recommendations.forEach((rec: any) => {
      doc.text(`• ${rec.title || rec}`, 25, yPos);
      yPos += 7;
      
      if (rec.description) {
        // Wrap long descriptions
        const descLines = doc.splitTextToSize(rec.description, 160);
        descLines.forEach((line: string) => {
          doc.text(`  ${line}`, 30, yPos);
          yPos += 7;
        });
        
        yPos += 3;
      }
    });
  } else {
    doc.text('No recommendations available', 25, yPos);
    yPos += 10;
  }
  
  return yPos;
};

const addHealthContent = (doc: jsPDF, data: any, startY: number): number => {
  let yPos = startY;
  
  // Section: Physical Metrics
  doc.setFontSize(16);
  doc.setTextColor(0, 122, 204); // Blue
  doc.text('Physical Metrics', 20, yPos);
  yPos += 10;
  
  doc.setFontSize(12);
  doc.setTextColor(68, 68, 68); // Dark gray
  
  if (data.physical) {
    if (data.physical.height) doc.text(`• Height: ${data.physical.height} cm`, 25, yPos), yPos += 7;
    if (data.physical.weight) doc.text(`• Weight: ${data.physical.weight} kg`, 25, yPos), yPos += 7;
    if (data.physical.bloodPressure) doc.text(`• Blood Pressure: ${data.physical.bloodPressure} mmHg`, 25, yPos), yPos += 7;
    if (data.physical.heartRate) doc.text(`• Heart Rate: ${data.physical.heartRate} bpm`, 25, yPos), yPos += 7;
    yPos += 3;
  } else {
    doc.text('No physical metrics available', 25, yPos);
    yPos += 10;
  }
  
  // Section: Lifestyle
  doc.setFontSize(16);
  doc.setTextColor(0, 122, 204); // Blue
  doc.text('Lifestyle', 20, yPos);
  yPos += 10;
  
  if (data.lifestyle) {
    if (data.lifestyle.sleepHours) doc.text(`• Sleep: ${data.lifestyle.sleepHours} hours/night`, 25, yPos), yPos += 7;
    if (data.lifestyle.exerciseFrequency) {
      const exerciseMap: Record<string, string> = {
        'daily': 'Daily',
        '3-5_times': '3-5 times per week',
        '1-2_times': '1-2 times per week',
        'rarely': 'Rarely',
        'never': 'Never'
      };
      doc.text(`• Exercise: ${exerciseMap[data.lifestyle.exerciseFrequency] || data.lifestyle.exerciseFrequency}`, 25, yPos), yPos += 7;
    }
    if (data.lifestyle.dietType) doc.text(`• Diet: ${data.lifestyle.dietType.charAt(0).toUpperCase() + data.lifestyle.dietType.slice(1)}`, 25, yPos), yPos += 7;
    if (data.lifestyle.stressLevel) {
      const stressMap: Record<string, string> = {
        'very_low': 'Very Low',
        'low': 'Low',
        'moderate': 'Moderate',
        'high': 'High',
        'very_high': 'Very High'
      };
      doc.text(`• Stress Level: ${stressMap[data.lifestyle.stressLevel] || data.lifestyle.stressLevel}`, 25, yPos), yPos += 7;
    }
    yPos += 3;
  } else {
    doc.text('No lifestyle data available', 25, yPos);
    yPos += 10;
  }
  
  // Section: Medical Information
  doc.setFontSize(16);
  doc.setTextColor(0, 122, 204); // Blue
  doc.text('Medical Information', 20, yPos);
  yPos += 10;
  
  if (data.medical) {
    if (data.medical.medicalConditions) {
      doc.text('• Medical Conditions:', 25, yPos), yPos += 7;
      const conditionsLines = doc.splitTextToSize(data.medical.medicalConditions, 160);
      conditionsLines.forEach((line: string) => {
        doc.text(`  ${line}`, 30, yPos);
        yPos += 7;
      });
    }
    
    if (data.medical.allergies) {
      doc.text('• Allergies:', 25, yPos), yPos += 7;
      const allergiesLines = doc.splitTextToSize(data.medical.allergies, 160);
      allergiesLines.forEach((line: string) => {
        doc.text(`  ${line}`, 30, yPos);
        yPos += 7;
      });
    }
    
    if (data.medical.medications) {
      doc.text('• Medications:', 25, yPos), yPos += 7;
      const medicationsLines = doc.splitTextToSize(data.medical.medications, 160);
      medicationsLines.forEach((line: string) => {
        doc.text(`  ${line}`, 30, yPos);
        yPos += 7;
      });
    }
    yPos += 3;
  } else {
    doc.text('No medical information available', 25, yPos);
    yPos += 10;
  }
  
  // Add Facial Analysis Results if available
  if (data.faceAnalysis) {
    yPos = addFaceAnalysisContent(doc, data.faceAnalysis, yPos);
  }
  
  // Section: Health Goals
  if (data.goals) {
    doc.setFontSize(16);
    doc.setTextColor(0, 122, 204); // Blue
    doc.text('Health Goals', 20, yPos);
    yPos += 10;
    
    const goalsLines = doc.splitTextToSize(data.goals, 170);
    goalsLines.forEach((line: string) => {
      doc.text(line, 25, yPos);
      yPos += 7;
    });
  }
  
  return yPos;
};

const addFaceAnalysisContent = (doc: jsPDF, faceData: any, startY: number): number => {
  let yPos = startY;
  
  // Section Header
  doc.setFontSize(16);
  doc.setTextColor(0, 122, 204); // Blue
  doc.text('Facial Analysis Results', 20, yPos);
  yPos += 10;
  
  doc.setFontSize(12);
  doc.setTextColor(68, 68, 68); // Dark gray
  
  // Basic info
  if (faceData.age) doc.text(`• Age Estimate: ${faceData.age} years`, 25, yPos), yPos += 7;
  if (faceData.gender) {
    const gender = faceData.gender.charAt(0).toUpperCase() + faceData.gender.slice(1);
    const probability = faceData.genderProbability ? ` (${(Number(faceData.genderProbability) * 100).toFixed(0)}% confidence)` : '';
    doc.text(`• Gender: ${gender}${probability}`, 25, yPos), yPos += 7;
  }
  
  if (faceData.dominantExpression) {
    const expression = faceData.dominantExpression.charAt(0).toUpperCase() + faceData.dominantExpression.slice(1);
    doc.text(`• Dominant Expression: ${expression}`, 25, yPos), yPos += 7;
  }
  
  yPos += 5;
  
  // Expressions section
  if (faceData.expressions) {
    doc.setFontSize(14);
    doc.setTextColor(0, 122, 204); // Blue
    doc.text('Expression Analysis', 25, yPos);
    yPos += 8;
    
    doc.setFontSize(12);
    doc.setTextColor(68, 68, 68); // Dark gray
    
    Object.entries(faceData.expressions).forEach(([expression, value]: [string, any]) => {
      const expressionName = expression.charAt(0).toUpperCase() + expression.slice(1);
      const percentage = (Number(value) * 100).toFixed(0);
      
      doc.text(`• ${expressionName}: ${percentage}%`, 30, yPos);
      
      // Draw progress bar
      const barStartX = 110;
      const barWidth = 60;
      const barHeight = 3;
      
      doc.setFillColor(220, 220, 220); // Light gray for background
      doc.rect(barStartX, yPos - 3, barWidth, barHeight, 'F');
      
      doc.setFillColor(0, 198, 190); // Teal for progress
      doc.rect(barStartX, yPos - 3, barWidth * (Number(value)), barHeight, 'F');
      
      yPos += 7;
    });
    
    yPos += 5;
  }
  
  // Wellness metrics section
  if (faceData.wellness) {
    doc.setFontSize(14);
    doc.setTextColor(0, 122, 204); // Blue
    doc.text('Wellness Metrics', 25, yPos);
    yPos += 8;
    
    doc.setFontSize(12);
    doc.setTextColor(68, 68, 68); // Dark gray
    
    Object.entries(faceData.wellness).forEach(([metric, value]: [string, any]) => {
      const metricName = metric.charAt(0).toUpperCase() + metric.slice(1).replace(/([A-Z])/g, ' $1');
      const percentage = typeof value === 'number' ? value.toFixed(0) : value;
      
      doc.text(`• ${metricName}: ${percentage}%`, 30, yPos);
      
      // Draw progress bar
      const barStartX = 110;
      const barWidth = 60;
      const barHeight = 3;
      
      doc.setFillColor(220, 220, 220); // Light gray for background
      doc.rect(barStartX, yPos - 3, barWidth, barHeight, 'F');
      
      doc.setFillColor(0, 198, 190); // Teal for progress
      doc.rect(barStartX, yPos - 3, barWidth * (Number(percentage) / 100), barHeight, 'F');
      
      yPos += 7;
    });
    
    yPos += 5;
  }
  
  // Mental state section
  if (faceData.mentalState) {
    doc.setFontSize(14);
    doc.setTextColor(0, 122, 204); // Blue
    doc.text('Mental State Analysis', 25, yPos);
    yPos += 8;
    
    doc.setFontSize(12);
    doc.setTextColor(68, 68, 68); // Dark gray
    
    Object.entries(faceData.mentalState).forEach(([state, value]: [string, any]) => {
      const stateName = state.charAt(0).toUpperCase() + state.slice(1);
      const percentage = typeof value === 'number' ? value.toFixed(0) : value;
      
      doc.text(`• ${stateName}: ${percentage}%`, 30, yPos);
      
      // Draw progress bar
      const barStartX = 110;
      const barWidth = 60;
      const barHeight = 3;
      
      doc.setFillColor(220, 220, 220); // Light gray for background
      doc.rect(barStartX, yPos - 3, barWidth, barHeight, 'F');
      
      doc.setFillColor(0, 198, 190); // Teal for progress
      doc.rect(barStartX, yPos - 3, barWidth * (Number(percentage) / 100), barHeight, 'F');
      
      yPos += 7;
    });
  }
  
  return yPos + 5;
};

const addFinanceContent = (doc: jsPDF, data: any, startY: number): number => {
  let yPos = startY;
  
  // Section: Financial Summary
  doc.setFontSize(16);
  doc.setTextColor(0, 122, 204); // Blue
  doc.text('Financial Summary', 20, yPos);
  yPos += 10;
  
  doc.setFontSize(12);
  doc.setTextColor(68, 68, 68); // Dark gray
  
  if (data.summary) {
    if (data.summary.income !== undefined) doc.text(`• Monthly Income: $${data.summary.income}`, 25, yPos), yPos += 7;
    if (data.summary.expenses !== undefined) doc.text(`• Monthly Expenses: $${data.summary.expenses}`, 25, yPos), yPos += 7;
    if (data.summary.savings !== undefined) doc.text(`• Monthly Savings: $${data.summary.savings}`, 25, yPos), yPos += 7;
    if (data.summary.netWorth !== undefined) doc.text(`• Net Worth: $${data.summary.netWorth}`, 25, yPos), yPos += 7;
    yPos += 3;
  } else {
    doc.text('No financial summary available', 25, yPos);
    yPos += 10;
  }
  
  // Section: Budget
  doc.setFontSize(16);
  doc.setTextColor(0, 122, 204); // Blue
  doc.text('Budget Breakdown', 20, yPos);
  yPos += 10;
  
  if (data.budget && data.budget.categories && data.budget.categories.length > 0) {
    data.budget.categories.forEach((category: any) => {
      doc.text(`• ${category.name}: $${category.amount} (${category.percentage}%)`, 25, yPos);
      yPos += 7;
    });
    yPos += 3;
  } else {
    doc.text('No budget data available', 25, yPos);
    yPos += 10;
  }
  
  // Section: Savings & Investments
  doc.setFontSize(16);
  doc.setTextColor(0, 122, 204); // Blue
  doc.text('Savings & Investments', 20, yPos);
  yPos += 10;
  
  if (data.savings && data.savings.accounts && data.savings.accounts.length > 0) {
    data.savings.accounts.forEach((account: any) => {
      doc.text(`• ${account.name}: $${account.balance}`, 25, yPos);
      yPos += 7;
      
      if (account.interestRate) {
        doc.text(`  Interest Rate: ${account.interestRate}%`, 30, yPos);
        yPos += 7;
      }
      
      if (account.notes) {
        const notesLines = doc.splitTextToSize(account.notes, 160);
        notesLines.forEach((line: string) => {
          doc.text(`  ${line}`, 30, yPos);
          yPos += 7;
        });
      }
      
      yPos += 3;
    });
  } else {
    doc.text('No savings or investment data available', 25, yPos);
    yPos += 10;
  }
  
  // Section: Financial Goals
  if (data.goals && data.goals.length > 0) {
    doc.setFontSize(16);
    doc.setTextColor(0, 122, 204); // Blue
    doc.text('Financial Goals', 20, yPos);
    yPos += 10;
    
    data.goals.forEach((goal: any) => {
      doc.text(`• ${goal.name}`, 25, yPos);
      yPos += 7;
      
      if (goal.targetAmount) {
        doc.text(`  Target: $${goal.targetAmount}`, 30, yPos);
        yPos += 7;
      }
      
      if (goal.currentAmount) {
        const percentage = goal.targetAmount 
          ? ((goal.currentAmount / goal.targetAmount) * 100).toFixed(1) 
          : '0';
        doc.text(`  Progress: $${goal.currentAmount} (${percentage}%)`, 30, yPos);
        yPos += 7;
      }
      
      if (goal.targetDate) {
        doc.text(`  Target Date: ${goal.targetDate}`, 30, yPos);
        yPos += 7;
      }
      
      yPos += 3;
    });
  }
  
  // Section: Recommendations
  if (data.recommendations && data.recommendations.length > 0) {
    doc.setFontSize(16);
    doc.setTextColor(0, 122, 204); // Blue
    doc.text('Financial Recommendations', 20, yPos);
    yPos += 10;
    
    data.recommendations.forEach((rec: any) => {
      doc.text(`• ${rec.title || rec}`, 25, yPos);
      yPos += 7;
      
      if (rec.description) {
        const descLines = doc.splitTextToSize(rec.description, 160);
        descLines.forEach((line: string) => {
          doc.text(`  ${line}`, 30, yPos);
          yPos += 7;
        });
      }
      
      yPos += 3;
    });
  }
  
  return yPos;
};
