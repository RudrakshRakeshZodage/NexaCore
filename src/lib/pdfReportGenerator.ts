
import { jsPDF } from 'jspdf';
import { saveAs } from 'file-saver';

type ReportType = 'education' | 'health' | 'finance' | 'comprehensive';

interface GeneratePDFOptions {
  includeTimestamp?: boolean;
  includeHeader?: boolean;
  includeLogo?: boolean;
  includeFooter?: boolean;
}

/**
 * Generate a PDF report from data
 */
export const generatePDFReport = async (
  data: any,
  reportType: ReportType,
  userName: string = 'User',
  options: GeneratePDFOptions = {}
): Promise<{ blob: Blob; url: string }> => {
  // Create a new PDF document
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4',
  });
  
  // Set default options
  const { 
    includeTimestamp = true, 
    includeHeader = true, 
    includeLogo = true, 
    includeFooter = true
  } = options;
  
  // Default margins
  const margin = 20;
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  const contentWidth = pageWidth - 2 * margin;
  
  // Set font styles
  doc.setFont('helvetica', 'normal');
  
  // Add header
  if (includeHeader) {
    doc.setFillColor(30, 41, 59); // Dark blue header
    doc.rect(0, 0, pageWidth, 30, 'F');
    
    // Add logo
    if (includeLogo) {
      // This would ideally be a real logo
      doc.setTextColor(0, 230, 180); // Teal color
      doc.setFontSize(18);
      doc.setFont('helvetica', 'bold');
      doc.text('NexaCore', margin, 12);
    }
    
    // Add report type
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(14);
    doc.setFont('helvetica', 'normal');
    doc.text(getReportTitle(reportType), pageWidth - margin - doc.getTextWidth(getReportTitle(reportType)), 12);
    
    // Add date if requested
    if (includeTimestamp) {
      const dateString = new Date().toLocaleDateString();
      doc.setFontSize(10);
      doc.text(dateString, pageWidth - margin - doc.getTextWidth(dateString), 20);
    }
  }
  
  // Main content
  let yPos = includeHeader ? 40 : margin;
  
  // Title
  doc.setTextColor(30, 41, 59);
  doc.setFontSize(18);
  doc.setFont('helvetica', 'bold');
  doc.text(`${getReportTitle(reportType)} for ${userName}`, margin, yPos);
  yPos += 10;
  
  // Divider
  doc.setDrawColor(0, 230, 180);
  doc.setLineWidth(0.5);
  doc.line(margin, yPos, pageWidth - margin, yPos);
  yPos += 10;
  
  // Add content based on report type
  switch (reportType) {
    case 'education':
      yPos = addEducationContent(doc, data, yPos, margin, contentWidth);
      break;
    case 'health':
      yPos = addHealthContent(doc, data, yPos, margin, contentWidth);
      break;
    case 'finance':
      yPos = addFinanceContent(doc, data, yPos, margin, contentWidth);
      break;
    case 'comprehensive':
      yPos = addComprehensiveContent(doc, data, yPos, margin, contentWidth);
      break;
  }
  
  // Add footer
  if (includeFooter) {
    const footerText = "Generated by NexaCore • Confidential Report";
    doc.setFontSize(8);
    doc.setTextColor(100, 100, 100);
    doc.text(footerText, pageWidth / 2 - doc.getTextWidth(footerText) / 2, pageHeight - 10);
  }
  
  // Convert to blob
  const pdfBlob = doc.output('blob');
  
  // Generate a URL for the blob
  const url = URL.createObjectURL(pdfBlob);
  
  return { blob: pdfBlob, url };
};

/**
 * Download a PDF report
 */
export const downloadPDFReport = async (
  data: any,
  reportType: ReportType,
  userName: string = 'User',
  options: GeneratePDFOptions = {}
): Promise<void> => {
  const { blob } = await generatePDFReport(data, reportType, userName, options);
  saveAs(blob, `nexacore_${reportType}_report.pdf`);
};

// Helper functions to add content to the PDF
const addEducationContent = (doc: jsPDF, data: any, yPos: number, margin: number, contentWidth: number): number => {
  // Handle education reports
  if (!data || !data.educationLevel) {
    // Add sample content for demo
    return addSampleEducationContent(doc, yPos, margin, contentWidth);
  }
  
  // Education level and institution
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Education Overview', margin, yPos);
  yPos += 8;
  
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  doc.text(`Education Level: ${data.educationLevel}`, margin, yPos);
  yPos += 6;
  
  if (data.institution) {
    doc.text(`Institution: ${data.institution}`, margin, yPos);
    yPos += 6;
  }
  
  if (data.fieldOfStudy) {
    doc.text(`Field of Study: ${data.fieldOfStudy}`, margin, yPos);
    yPos += 6;
  }
  
  if (data.graduationYear) {
    doc.text(`Graduation Year: ${data.graduationYear}`, margin, yPos);
    yPos += 6;
  }
  
  // Skills section
  if (data.skills && data.skills.length > 0) {
    yPos += 5;
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Skills', margin, yPos);
    yPos += 8;
    
    doc.setFontSize(11);
    doc.setFont('helvetica', 'normal');
    
    data.skills.forEach((skill: string) => {
      doc.text(`• ${skill}`, margin + 5, yPos);
      yPos += 6;
    });
  }
  
  // Career section
  if (data.careerPath || data.careerGoals) {
    yPos += 5;
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Career Development', margin, yPos);
    yPos += 8;
    
    doc.setFontSize(11);
    doc.setFont('helvetica', 'normal');
    
    if (data.careerPath) {
      doc.text(`Career Path: ${data.careerPath}`, margin, yPos);
      yPos += 6;
    }
    
    if (data.careerGoals) {
      doc.text(`Goals:`, margin, yPos);
      yPos += 6;
      
      // Split long text into multiple lines
      const textLines = doc.splitTextToSize(data.careerGoals, contentWidth - 10);
      textLines.forEach((line: string) => {
        doc.text(line, margin + 5, yPos);
        yPos += 6;
      });
    }
  }
  
  return yPos;
};

const addHealthContent = (doc: jsPDF, data: any, yPos: number, margin: number, contentWidth: number): number => {
  // Handle health reports
  if (!data || (!data.physical && !data.lifestyle && !data.faceAnalysis)) {
    // Add sample content for demo
    return addSampleHealthContent(doc, yPos, margin, contentWidth);
  }
  
  // Physical metrics
  if (data.physical) {
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Physical Metrics', margin, yPos);
    yPos += 8;
    
    doc.setFontSize(11);
    doc.setFont('helvetica', 'normal');
    
    if (data.physical.height) {
      doc.text(`Height: ${data.physical.height} cm`, margin, yPos);
      yPos += 6;
    }
    
    if (data.physical.weight) {
      doc.text(`Weight: ${data.physical.weight} kg`, margin, yPos);
      yPos += 6;
    }
    
    if (data.physical.bloodPressure) {
      doc.text(`Blood Pressure: ${data.physical.bloodPressure} mmHg`, margin, yPos);
      yPos += 6;
    }
    
    if (data.physical.heartRate) {
      doc.text(`Resting Heart Rate: ${data.physical.heartRate} bpm`, margin, yPos);
      yPos += 6;
    }
  }
  
  // Lifestyle factors
  if (data.lifestyle) {
    yPos += 5;
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Lifestyle Factors', margin, yPos);
    yPos += 8;
    
    doc.setFontSize(11);
    doc.setFont('helvetica', 'normal');
    
    if (data.lifestyle.sleepHours) {
      doc.text(`Sleep: ${data.lifestyle.sleepHours} hours per night (avg)`, margin, yPos);
      yPos += 6;
    }
    
    if (data.lifestyle.exerciseFrequency) {
      const exerciseMap: { [key: string]: string } = {
        'daily': 'Daily',
        '3-5_times': '3-5 times per week',
        '1-2_times': '1-2 times per week',
        'rarely': 'Rarely',
        'never': 'Never'
      };
      
      const exerciseText = exerciseMap[data.lifestyle.exerciseFrequency] || data.lifestyle.exerciseFrequency;
      doc.text(`Exercise Frequency: ${exerciseText}`, margin, yPos);
      yPos += 6;
    }
    
    if (data.lifestyle.dietType) {
      const dietMap: { [key: string]: string } = {
        'omnivore': 'Omnivore',
        'vegetarian': 'Vegetarian',
        'vegan': 'Vegan',
        'paleo': 'Paleo',
        'keto': 'Keto',
        'mediterranean': 'Mediterranean'
      };
      
      const dietText = dietMap[data.lifestyle.dietType] || data.lifestyle.dietType;
      doc.text(`Diet Type: ${dietText}`, margin, yPos);
      yPos += 6;
    }
    
    if (data.lifestyle.stressLevel) {
      const stressMap: { [key: string]: string } = {
        'very_low': 'Very Low',
        'low': 'Low',
        'moderate': 'Moderate',
        'high': 'High',
        'very_high': 'Very High'
      };
      
      const stressText = stressMap[data.lifestyle.stressLevel] || data.lifestyle.stressLevel;
      doc.text(`Stress Level: ${stressText}`, margin, yPos);
      yPos += 6;
    }
  }
  
  // Face Analysis
  if (data.faceAnalysis) {
    yPos += 5;
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Facial Analysis Results', margin, yPos);
    yPos += 8;
    
    doc.setFontSize(11);
    doc.setFont('helvetica', 'normal');
    
    if (data.faceAnalysis.age) {
      doc.text(`Estimated Age: ${data.faceAnalysis.age} years`, margin, yPos);
      yPos += 6;
    }
    
    if (data.faceAnalysis.gender) {
      const genderText = data.faceAnalysis.gender.charAt(0).toUpperCase() + data.faceAnalysis.gender.slice(1);
      const probability = data.faceAnalysis.genderProbability ? ` (${Math.round(Number(data.faceAnalysis.genderProbability) * 100)}% probability)` : '';
      doc.text(`Gender: ${genderText}${probability}`, margin, yPos);
      yPos += 6;
    }
    
    if (data.faceAnalysis.dominantExpression) {
      const emotionText = data.faceAnalysis.dominantExpression.charAt(0).toUpperCase() + data.faceAnalysis.dominantExpression.slice(1);
      doc.text(`Dominant Emotion: ${emotionText}`, margin, yPos);
      yPos += 6;
    }
    
    // Expression Analysis
    if (data.faceAnalysis.expressions) {
      yPos += 3;
      doc.text('Expression Analysis:', margin, yPos);
      yPos += 6;
      
      // Create a sorted list of expressions by probability
      const expressions = Object.entries(data.faceAnalysis.expressions)
        .sort((a, b) => Number(b[1]) - Number(a[1]))
        .slice(0, 7); // Show top 7 expressions
      
      expressions.forEach(([expression, probability]: [string, any]) => {
        const expressionText = expression.charAt(0).toUpperCase() + expression.slice(1);
        const probabilityText = Math.round(Number(probability) * 100) + '%';
        doc.text(`• ${expressionText}: ${probabilityText}`, margin + 5, yPos);
        yPos += 6;
      });
    }
  }
  
  return yPos;
};

const addFinanceContent = (doc: jsPDF, data: any, yPos: number, margin: number, contentWidth: number): number => {
  // Handle finance reports
  if (!data || (!data.budget && !data.transactions)) {
    // Add sample content for demo
    return addSampleFinanceContent(doc, yPos, margin, contentWidth);
  }
  
  // Budget overview
  if (data.budget) {
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Budget Overview', margin, yPos);
    yPos += 8;
    
    doc.setFontSize(11);
    doc.setFont('helvetica', 'normal');
    
    if (data.budget.monthlyIncome) {
      doc.text(`Monthly Income: $${data.budget.monthlyIncome}`, margin, yPos);
      yPos += 6;
    }
    
    if (data.budget.savingsTarget) {
      doc.text(`Savings Target: ${data.budget.savingsTarget}%`, margin, yPos);
      yPos += 6;
    }
    
    if (data.budget.categories) {
      yPos += 3;
      doc.text('Budget Allocation:', margin, yPos);
      yPos += 6;
      
      Object.entries(data.budget.categories).forEach(([category, percentage]: [string, any]) => {
        const categoryText = category.charAt(0).toUpperCase() + category.slice(1);
        doc.text(`• ${categoryText}: ${percentage}%`, margin + 5, yPos);
        yPos += 6;
      });
    }
  }
  
  // Recent transactions
  if (data.transactions && data.transactions.length > 0) {
    yPos += 5;
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Recent Transactions', margin, yPos);
    yPos += 8;
    
    // Table header
    doc.setFontSize(10);
    doc.setFont('helvetica', 'bold');
    doc.text('Date', margin, yPos);
    doc.text('Description', margin + 25, yPos);
    doc.text('Category', margin + 85, yPos);
    doc.text('Amount', margin + 125, yPos);
    yPos += 4;
    
    // Divider line
    doc.setDrawColor(200, 200, 200);
    doc.setLineWidth(0.2);
    doc.line(margin, yPos, margin + contentWidth, yPos);
    yPos += 6;
    
    // Table rows
    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    
    data.transactions.slice(0, 10).forEach((tx: any) => {
      const date = tx.date ? new Date(tx.date).toLocaleDateString() : 'N/A';
      const description = tx.description || 'Unknown';
      const category = tx.category || 'Uncategorized';
      const amount = tx.amount ? (tx.type === 'expense' ? `-$${tx.amount}` : `+$${tx.amount}`) : '$0';
      
      doc.text(date, margin, yPos);
      doc.text(description.substring(0, 30), margin + 25, yPos);
      doc.text(category, margin + 85, yPos);
      doc.text(amount, margin + 125, yPos);
      
      yPos += 5;
      
      // Check if we need a new page
      if (yPos > 260) {
        doc.addPage();
        yPos = 20;
      }
    });
  }
  
  return yPos;
};

const addComprehensiveContent = (doc: jsPDF, data: any, yPos: number, margin: number, contentWidth: number): number => {
  // Handle comprehensive reports
  
  // Executive summary
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Executive Summary', margin, yPos);
  yPos += 8;
  
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  doc.text(
    'This report provides a holistic overview of your education, health, and financial status. ' +
    'The analysis includes personalized insights and recommendations based on your data.',
    margin, yPos, { maxWidth: contentWidth }
  );
  yPos += 15;
  
  // Education summary
  if (data.education) {
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Education Summary', margin, yPos);
    yPos += 8;
    
    yPos = addEducationContent(doc, data.education, yPos, margin, contentWidth);
    yPos += 10;
  }
  
  // Check if we need a new page
  if (yPos > 240) {
    doc.addPage();
    yPos = 20;
  }
  
  // Health summary
  if (data.health) {
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Health & Wellness Summary', margin, yPos);
    yPos += 8;
    
    yPos = addHealthContent(doc, data.health, yPos, margin, contentWidth);
    yPos += 10;
  }
  
  // Check if we need a new page
  if (yPos > 240) {
    doc.addPage();
    yPos = 20;
  }
  
  // Finance summary
  if (data.finance) {
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Financial Summary', margin, yPos);
    yPos += 8;
    
    yPos = addFinanceContent(doc, data.finance, yPos, margin, contentWidth);
  }
  
  return yPos;
};

// Sample content for when no data is provided
const addSampleEducationContent = (doc: jsPDF, yPos: number, margin: number, contentWidth: number): number => {
  doc.setFontSize(11);
  doc.setFont('helvetica', 'italic');
  doc.text('This is a demonstration education report with placeholder content.', margin, yPos);
  yPos += 10;
  
  doc.setFont('helvetica', 'normal');
  doc.text('Education Level: Bachelor\'s Degree', margin, yPos);
  yPos += 6;
  doc.text('Institution: Sample University', margin, yPos);
  yPos += 6;
  doc.text('Field of Study: Computer Science', margin, yPos);
  yPos += 6;
  doc.text('Graduation Year: 2022', margin, yPos);
  yPos += 10;
  
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Skills', margin, yPos);
  yPos += 8;
  
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  const skills = ['JavaScript', 'React', 'Node.js', 'Python', 'SQL'];
  skills.forEach(skill => {
    doc.text(`• ${skill}`, margin + 5, yPos);
    yPos += 6;
  });
  
  return yPos;
};

const addSampleHealthContent = (doc: jsPDF, yPos: number, margin: number, contentWidth: number): number => {
  doc.setFontSize(11);
  doc.setFont('helvetica', 'italic');
  doc.text('This is a demonstration health report with placeholder content.', margin, yPos);
  yPos += 10;
  
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Physical Metrics', margin, yPos);
  yPos += 8;
  
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  doc.text('Height: 175 cm', margin, yPos);
  yPos += 6;
  doc.text('Weight: 70 kg', margin, yPos);
  yPos += 6;
  doc.text('Blood Pressure: 120/80 mmHg', margin, yPos);
  yPos += 6;
  doc.text('Resting Heart Rate: 72 bpm', margin, yPos);
  yPos += 10;
  
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Facial Analysis Results', margin, yPos);
  yPos += 8;
  
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  doc.text('Estimated Age: 28 years', margin, yPos);
  yPos += 6;
  doc.text('Gender: Male (92% probability)', margin, yPos);
  yPos += 6;
  doc.text('Dominant Emotion: Happy', margin, yPos);
  yPos += 6;
  
  doc.text('Expression Analysis:', margin, yPos);
  yPos += 6;
  
  const expressions = [
    ['Happy', '72%'],
    ['Neutral', '15%'],
    ['Surprised', '8%'],
    ['Sad', '3%'],
    ['Angry', '1%'],
    ['Fearful', '1%'],
    ['Disgusted', '0%']
  ];
  
  expressions.forEach(([emotion, percentage]) => {
    doc.text(`• ${emotion}: ${percentage}`, margin + 5, yPos);
    yPos += 6;
  });
  
  return yPos;
};

const addSampleFinanceContent = (doc: jsPDF, yPos: number, margin: number, contentWidth: number): number => {
  doc.setFontSize(11);
  doc.setFont('helvetica', 'italic');
  doc.text('This is a demonstration financial report with placeholder content.', margin, yPos);
  yPos += 10;
  
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Budget Overview', margin, yPos);
  yPos += 8;
  
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  doc.text('Monthly Income: $4,500', margin, yPos);
  yPos += 6;
  doc.text('Savings Target: 20%', margin, yPos);
  yPos += 6;
  
  doc.text('Budget Allocation:', margin, yPos);
  yPos += 6;
  
  const categories = [
    ['Housing', '30%'],
    ['Food', '15%'],
    ['Transportation', '10%'],
    ['Utilities', '10%'],
    ['Entertainment', '10%'],
    ['Other', '5%']
  ];
  
  categories.forEach(([category, percentage]) => {
    doc.text(`• ${category}: ${percentage}`, margin + 5, yPos);
    yPos += 6;
  });
  
  return yPos;
};

/**
 * Get the appropriate title for a report type
 */
const getReportTitle = (reportType: ReportType): string => {
  switch (reportType) {
    case 'education':
      return 'Education Progress Report';
    case 'health':
      return 'Health & Wellness Assessment';
    case 'finance':
      return 'Financial Status Report';
    case 'comprehensive':
      return 'Comprehensive Life Status Report';
    default:
      return 'NexaCore Report';
  }
};
